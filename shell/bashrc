# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

# color prompt

#count=0
#for color in "BLACK" "RED" "GREEN" "YELLOW" "BLUE" "PURPLE" "CYAN" "WHITE"
#do
#    eval ${color}=`echo -ne \"'\[\e[0;3'$count'm\]'\"`
#    eval B_${color}=`echo -ne \"'\[\e[1;3'$count'm\]'\"`
#    (( count = $count + 1 ))
#done

BLACK="\[\e[0;30m\]"
B_BLACK="\[\e[1;30m\]"
RED="\[\e[0;31m\]"
B_RED="\[\e[1;31m\]"
GREEN="\[\e[0;32m\]"
B_GREEN="\[\e[1;32m\]"
YELLOW="\[\e[0;33m\]"
B_YELLOW="\[\e[1;33m\]"
BLUE="\[\e[0;34m\]"
B_BLUE="\[\e[1;34m\]"
PURPLE="\[\e[0;35m\]"
B_PURPLE="\[\e[1;35m\]"
CYAN="\[\e[0;36m\]"
B_CYAN="\[\e[1;36m\]"
WHITE="\[\e[0;37m\]"
B_WHITE="\[\e[1;37m\]"

COLOR_RESET="\[\e[0m\]"

if [[ "`id -u`" -eq 0 ]]; then
    _PS1="$B_RED\u$COLOR_RESET@$B_GREEN\H$COLOR_RESET:$B_RED\w$COLOR_RESET\n\\$ "
else
    _PS1="$B_BLUE\u$COLOR_RESET@$B_GREEN\H$COLOR_RESET:$B_RED\w$COLOR_RESET\n\\$ "
fi


function update_PS1()
{
    if [[ -n $TMUX ]]; then
        nsh=$((SHLVL - 3))
    else
        nsh=$((SHLVL - 1))
    fi
    if [[ $nsh -gt 0 ]]; then
        nsh="($nsh)"
    else
        nsh=""
    fi
    virtual=""
    if [[ -n $VIRTUAL_ENV ]]; then
        virtual="(venv|`basename \"$VIRTUAL_ENV\"`)"
    fi
    git_branch=$(__git_ps1 "(git|%s)")
    hg_branch=$(hg branch 2> /dev/null | awk '{print$1}')
    if [[ "$hg_branch" != "" ]]; then
        hg_branch="(hg|$hg_branch)"
    fi
    export PS1=$git_branch$hg_branch$virtual$nsh$_PS1
}
PROMPT_COMMAND=update_PS1

# enable color support of ls and also add handy aliases
if [[ "$TERM" != "dumb" ]]; then
    if [[ `uname` == "Linux"  ]]; then
        eval "`dircolors -b`"
        alias ls='ls --color=auto'
    else
        alias ls='ls -G'
    fi
fi

# aliases
function _cd_work()
{
    for workdir in "$HOME/work/ag-projects" "$HOME/work/src"
    do
        if [[ -d "$workdir" ]]; then
            cd $workdir
            break
        fi
    done
}

function _tmux_new_or_attach()
{
    tmux has-session -t $1 2>/dev/null
    if [ "$?" -eq 1 ] ; then
        # No session found
        tmux new-session -d -s $1
    fi
    tmux attach-session -t $1
}

alias tmux='tmux -2'
alias t=_tmux_new_or_attach

alias ll='ls -lF -h'
alias la='ls -lFa -h'
alias l='ls -CF -h'

alias ..='cd ..'
alias cd..='cd ..'

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

if hash "ack-grep" > /dev/null 2>&1; then
    alias ack='ack-grep'
fi

alias du='du -sh'
alias df='df -h'

alias serve='python -m SimpleHTTPServer'

if hash "tmux" > /dev/null 2>&1; then
    alias tmux='TMPDIR=/tmp tmux -2'
fi

if [[ `uname` == "Darwin"  ]]; then
    alias syslog='tail -f /var/log/system.log'
else
    alias syslog='tail -f /var/log/syslog'
fi

if [[ `uname` == "Linux"  ]]; then
    alias screen-off='xset dpms force off'
fi

# Bash completion
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi
if [[ `uname` == "Darwin"  ]]; then
    if hash "brew" > /dev/null 2>&1; then
        if [ -f `brew --prefix`/etc/bash_completion ]; then
            . `brew --prefix`/etc/bash_completion
        fi
    fi
fi

# Terminal copy & paste
if [[ `uname` != "Darwin"  ]]; then
    alias pbcopy='xclip -selection c'
    alias pbpaste='xclip -selection clipboard -o'
fi

# Home directory bin apps
export PATH=~/bin:$PATH

# Cabal
export PATH=~/.cabal/bin:$PATH

# local paths
export PATH=/usr/local/bin:/usr/local/sbin:$PATH

# Always dump the core
ulimit -c unlimited

# ViM
alias vim='vim -p'
alias vi='vim'
alias gvim='gvim -p'
export EDITOR=vim

# Work
alias work=_cd_work
export DEBEMAIL="Saul Ibarra <saul@ag-projects.com>"

# language
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Virtualenv
export WORKON_HOME=$HOME/.virtualenvs
export PIP_VIRTUALENV_BASE=$WORKON_HOME
export PIP_RESPECT_VIRTUALENV=true
[[ -f /usr/share/virtualenvwrapper/virtualenvwrapper_lazy.sh ]] && source /usr/share/virtualenvwrapper/virtualenvwrapper_lazy.sh
[[ -f /usr/local/bin/virtualenvwrapper_lazy.sh ]] && source /usr/local/bin/virtualenvwrapper_lazy.sh

# Bash completion for git
[[ -s $HOME/.git-completion.bash ]] && source $HOME/.git-completion.bash

# Pythonz
[[ -s $HOME/.pythonz/etc/bashrc ]] && source $HOME/.pythonz/etc/bashrc

